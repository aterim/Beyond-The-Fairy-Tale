local config = require "main.config.config"
local dialogs = require "game.ui.dialogs.data.dialogs"
local utils = require "utils.utils"
local lvlManager = require "game.baseScripts.levelsManager"


	local function find_opt(id)
		for i = 1, #dialogs.OPTIONS do
			if dialogs.OPTIONS[i].id == id then
				return dialogs.OPTIONS[i]
			end
		end
		
		return nil
	end
	
	local function delete_opt(opt)
		gui.delete_node(opt["var_opt/body"])
		gui.delete_node(opt["var_opt/text"])
		opt[1] = nil
	end

local function add_options(self, id, indx, count)
	local opt = gui.clone_tree(self.opt_mockup)
	
	local first_x, offset = 250, 80
	--local offset = 80
	
	if count == 3 then
		first_x = 250 - 10
	elseif count == 2 then
		first_x = 200 - 30
	elseif count == 1 then
		first_x = 150 - 30
	end
	
	gui.set_position(opt["var_opt/body"], vmath.vector3(config.defaultWidth * 0.5, -100 - indx * offset, 0))
	
	gui.animate(opt["var_opt/body"], gui.PROP_POSITION, vmath.vector3(config.defaultWidth * 0.5, first_x - indx * offset, 0), 
		gui.EASING_OUTSINE, 0.25, 0.1 + indx * 0.08)
		
	local data = find_opt(id)
	local lng = config.language
	
	local txt = data.body[lng]
	
	gui.set_text(opt["var_opt/text"], txt)
	local text_width = config.width * 1.3 -- gui.get_text_metrics_from_node(opt["var_opt/text"]).width + 180
	
	--lora_italic
	gui.set_font(opt["var_opt/text"], ((txt:sub(1,1)=="[") and "lora_italic" or "lora_regular") )
	
	local size_box = gui.get_size(opt["var_opt/body"])
	size_box.x = text_width
	gui.set_size(opt["var_opt/body"], size_box)
	
	opt.next = data.next
	opt.message = data.message
	
	table.insert(self.options, opt)
end

local function hide_options(self, cb, the_end)

	local _cb = function(self)
		
		while #self.options > 0 do
			delete_opt(self.options[1])
			table.remove(self.options, 1)
		end
		if cb ~= nil then
			cb(self)
		end
		
		if the_end then
			msg.post("#", "disable")
		end
	end
	
	local lng = #self.options
	
	for i = 1, lng do
		gui.animate(self.options[i]["var_opt/body"], gui.PROP_POSITION, vmath.vector3(config.defaultWidth * 0.5, -100 - i * 50, 0), 
			gui.EASING_OUTSINE, 0.25, (lng - i) * 0.08, ( (i == #self.options) and _cb or nil ) )
	end
end

	local function find_dialog(id)
		for i = 1, #dialogs.DIALOGS do
			if dialogs.DIALOGS[i].id == id then
				return dialogs.DIALOGS[i], i
			end
		end
		
		return nil
	end
	
	local function find_character(id)
		for i = 1, #dialogs.CHARACTERS do
			if dialogs.CHARACTERS[i].id == id then
				return dialogs.CHARACTERS[i], i
			end
		end
		
		return nil
	end
	
	local function get_dialog_text(id_dialog, lng, space)
		local s = ""
		
		space = space and " " or ""
		
		while true do
			local dlg = find_dialog(id_dialog)
			s = s..space..dlg.body[lng]
			
			if dlg.parent then
				id_dialog = dlg.parent
			else
				return s
			end
		end
	end

local function load_dialog(self, id_dialog, first)

	if first ~= true then
		local new_dlg = lvlManager.findSwiper(id_dialog)
		if new_dlg then
			id_dialog = new_dlg
		end
	end

	local data
	data, self.cur_dialog = find_dialog(id_dialog)
	local lng = config.language
	local character = find_character(data.character)
	
	if data.message then
		msg.post(config.currentLevel, "dialog_msg", {IDTile = self.IDTile, msg = data.message})
	end
	
	local parent_dialog_text = ""
	local our_text = data.body[lng]
	if data.parent then
		parent_dialog_text = get_dialog_text(data.parent, lng, our_text ~= "")
		--find_dialog(data.parent).body[lng]
	end

	local lng_opt = #data.options
	self.super_next = data.next
		
	for i = 1, lng_opt do
		add_options(self, data.options[i], i - 1, lng_opt)
	end
	
	-- dialog
	local character_name = character.name[lng]
	gui.set_text(self.text, our_text..parent_dialog_text)
	local cur_cap = gui.get_text(self.caption)
	
	local text_offset = 50 
	local cap_height = 42
	
	if character_name ~= "" then
		character_name = character_name..":"
	else
		text_offset = text_offset - cap_height
	end

	local size_text = gui.get_text_metrics_from_node(self.text)
	local line_count = math.floor(size_text.height / 43) - 1	

	local size_box = gui.get_size(self.body)
	local new_size = size_text.height + text_offset - line_count * 5 + 50
	
	size_box.x = config.width * 1.3
	gui.set_size(self.body, size_box)
	
	if math.abs(new_size - size_box.y) >= 5 then
		size_box.y = new_size
		gui.animate(self.body, gui.PROP_SIZE, size_box, gui.EASING_OUTSINE, 0.2)
	end
	
	
	if first then
		gui.set_text(self.caption, character_name)
	
		local pos = gui.get_position(self.body)
		local w_ratio = (config.defaultWidth / config.width)
		local h_ratio = (config.defaultHeight / config.height)
		
		self.dialog_offset = pos.y
		
		pos.y = pos.y + size_box.y + 80 - 5 --( (character_name == "") and 10 or 0)
		
		if w_ratio > h_ratio then
			local offset = config.defaultHeight - pos.y
			local delta = (config.height  - config.defaultHeight / w_ratio) * 0.5
			
			pos.y = config.defaultHeight + delta * w_ratio - offset 
		end
		gui.set_position(self.body, pos)
		
		pos.y = pos.y - size_box.y - 80
		gui.animate(self.body, gui.PROP_POSITION, pos, gui.EASING_OUTSINE, 0.2)
		
		gui.set_color(self.body, vmath.vector4(1, 1, 1, 0))
		gui.animate(self.body, gui.PROP_COLOR, vmath.vector4(1, 1, 1, 1), gui.EASING_OUTSINE, 0.2)
	end
	
	if character_name ~= cur_cap then
		local text_y = -70
		
		if character_name ~= "" then
			if cur_cap == "" then
				local text_pos = gui.get_position(self.text)
				text_pos.y = text_y
				gui.animate(self.text, gui.PROP_POSITION, text_pos, gui.EASING_OUTSINE, 0.2)
			end
		else
			local text_pos = gui.get_position(self.text)
			text_pos.y = text_y + cap_height
			gui.animate(self.text, gui.PROP_POSITION, text_pos, gui.EASING_OUTSINE, 0.2)
		end

	end	
	
	if character_name ~= cur_cap or first then
		local cap_color = gui.get_color(self.caption)
		cap_color.w = 0
		
		gui.animate(self.caption, gui.PROP_COLOR, cap_color, gui.EASING_OUTSINE, 0.2, 0, function()
			gui.set_text(self.caption, character_name)
			
			cap_color.w = 1
			gui.animate(self.caption, gui.PROP_COLOR, cap_color, gui.EASING_OUTSINE, 0.2)
		end)
	end
	

	local color = gui.get_color(self.text)
	color.w = 0
	gui.set_color(self.text, color)
	color.w = 1
	gui.animate(self.text, gui.PROP_COLOR, color, gui.EASING_OUTSINE, 0.2, 0.2)

end

local function hide_dialog(self)
	local pos = gui.get_position(self.body)
	pos.y = pos.y + 200

	gui.animate(self.body, gui.PROP_POSITION, pos, gui.EASING_OUTSINE, 0.2)
	gui.animate(self.body, gui.PROP_COLOR, vmath.vector4(1, 1, 1, 0), gui.EASING_OUTSINE, 0.201, 0, function()
		pos.y = self.dialog_offset
		gui.set_position(self.body, pos)
	end)
	
	msg.post("main:/main#script", "end_dialog") 
	
end

function init(self)
    msg.post("#", "disable")
    
    self.opt_mockup = gui.get_node("var_opt/body")
    
    self.IDTile = nil
    
    self.body, self.text, self.caption = gui.get_node("dlg"), 
    				gui.get_node("text"), gui.get_node("caption")
    self.dialog_offset = 0
    
    self.cur_dialog = 0
    self.options = {}
    self.super_next = nil  -- переходим в диалоге
    
    self.selected_node = {0}
end

function on_message(self, message_id, message, sender)
    if message_id == hash("show") then
    	self.selected_node[1] = 0
    	msg.post("#", "enable")
    	msg.post("#", "acquire_input_focus")
    	self.IDTile = message.IDTile
    	load_dialog(self, message.dialog, true)
    	
    	msg.post("main:/main#script", "start_dialog") 
    end
end

local function action_option(self, option)
	local tp = type(option.next)
	
	if option.message then
		msg.post(config.currentLevel, "dialog_msg", {IDTile = self.IDTile, msg = option.message})
	end
	
	if tp == "nil" then
		local hold = nil
		
		if self.cur_option ~= 0 then
			hold = dialogs.DIALOGS[self.cur_dialog].hold
		end
		
		msg.post(config.currentLevel, "dialog_hide", {IDTile = self.IDTile, hold = hold, acquire_input = true})
		hide_options(self, nil, true)
		hide_dialog(self)
		
	elseif tp == "number" then 
		hide_options(self, function(self)
			load_dialog(self, option.next)
		end)
	elseif tp == "string" then 
		local input_time = 0.01
		
		local acquire_input = true
		
		if option.next == "unblock" then
			input_time = 2.5
		end
		
		if option.next == "fight" then
			acquire_input = false
		end
		
		msg.post(config.currentLevel, "dialog_hide", {IDTile = self.IDTile, input_time = input_time, acquire_input = acquire_input})
		
		if option.next ~= "#" then
			msg.post(config.currentLevel, "dialog_"..option.next, {IDTile = self.IDTile})
		end
		hide_options(self, nil, true)
		hide_dialog(self)
		
	end
end

function on_input(self, action_id, action)
    if action_id == hash("click_screen") then

    	for i = 1, #self.options do
    		utils.button_reaction(self, self.options[i]["var_opt/body"], action, function()
    			action_option(self, self.super_next and {next = self.super_next} or self.options[i])
    			msg.post("main:/main#script", "start_sound", {name = "click", gain = 0.04}) 
    		end, 
    		nil, self.selected_node)
    	end
    	
    end
end

function hide(self)

end

