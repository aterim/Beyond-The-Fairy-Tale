local config = require "main.config.config"
local utils = require "utils.utils"


local function animate_node(node, param, cb)

	local dt = 0.3
	--cb = cb or function()end
	
	if param ~= nil then
		dt = param.dt or 0.3
	end
	
	if param and (param.x or param.y or param.bx or param.by) then
		local bx, by = param.bx, param.by

		local p = gui.get_position(node)
		p.x = bx or p.x
		p.y = by or p.y
		gui.set_position(node, p)
		
		p.x = param.x or p.x
		p.y = param.y or p.y
		gui.animate(node, gui.PROP_POSITION, p, gui.EASING_OUTSINE, dt)
	end

	if param and param.alpha then
	
		local color = gui.get_color(node)
		--vmath.vector4(1, 1, 1, param.alpha)
		color.w = (param.begin_alpha or color.w)
		gui.set_color(node, color)
		color.w = param.alpha or 1
		gui.animate(node, gui.PROP_COLOR, color, gui.EASING_OUTSINE, dt, 0, cb)
	end
	 
end

local function show(self)
	msg.post("#", "acquire_input_focus")
	msg.post("#", "enable")
	
	--animate_node(self.body, {by = 500, y = 430, balpha = 0, alpha = 1})
	local pos = gui.get_position(self.body)
	pos.y = 600
	gui.set_position(self.body, pos)
	pos.y = 430
	gui.animate(self.body, gui.PROP_POSITION, pos, gui.EASING_OUTCIRC, 0.4, 0.1)
	
	local color = gui.get_color(self.body)
	color.w = 0
	gui.set_color(self.body, color)
	color.w = 1
	gui.animate(self.body, gui.PROP_COLOR, color, gui.EASING_OUTCIRC, 0.4, 0.1)
	
	
	color = gui.get_color(self.black)
	color.w = 0
	gui.set_color(self.black, color)
	color.w = 0.4
	gui.animate(self.black, gui.PROP_COLOR, color, gui.EASING_OUTCIRC, 0.2)
	
	pos.x = 0
	pos.y = 10
	gui.set_position(self.caption, pos)
	
	pos.x = 0
	pos.y = 0
	gui.set_position(self.caption_shadow, pos)
	
	gui.animate(self.caption, gui.PROP_POSITION, vmath.vector3(0, -5, 0), gui.EASING_INOUTSINE, 4.5, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)
	
	gui.animate(self.caption_shadow, gui.PROP_POSITION, vmath.vector3(0, -5, 0), gui.EASING_INOUTSINE, 4.5, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)
	
end

local function hide(self)
	msg.post("#", "release_input_focus")

	local pos = gui.get_position(self.body)
	pos.y = 500
	gui.animate(self.body, gui.PROP_POSITION, pos, gui.EASING_OUTSINE, 0.2)
	
	local color = gui.get_color(self.body)
	color.w = 0
	gui.animate(self.body, gui.PROP_COLOR, color, gui.EASING_OUTSINE, 0.2)
	
	gui.cancel_animation(self.caption, gui.PROP_POSITION)
	gui.cancel_animation(self.caption_shadow, gui.PROP_POSITION)
	
	color = gui.get_color(self.black)
	color.w = 0
	gui.animate(self.black, gui.PROP_COLOR, color, gui.EASING_OUTSINE, 0.2, 0,  function()
		msg.post("#", "disable")
	end)
end



function init(self)
    self.body = gui.get_node("body")
    self.menu = gui.get_node("menu")
    self.replay = gui.get_node("replay")
    
    self.black = gui.get_node("black")
    
    self.caption = gui.get_node("caption")
    self.caption_shadow = gui.get_node("caption_shadow")
    
    utils.re_position(self.body)
    
    msg.post("#", "disable")
    
    local scale = 1/config.ratio * config.ratio_max 
    gui.set_scale(self.black, vmath.vector3(scale,scale,scale))
    
    self.selected_node = {0}
end

function final(self)
    -- Add finalization code here
    -- Remove this function if not needed
end

function update(self, dt)
    -- Add update code here
    -- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == hash("show") then
		show(self)
		self.selected_node[1] = 0
	end
end

	local function replay_cb(self, node, parameters)
		msg.post(config.currentLevel, "reload_current_level")
		hide(self)
		
		msg.post("main:/main#script", "start_sound", {name = "click"}) 
	end
	
	local function main_menu_cb(self, node, parameters)
		msg.post("main:/main#script", "go_menu")
		hide(self)
		
		msg.post("main:/main#script", "start_sound", {name = "click"}) 
	end

function on_input(self, action_id, action)
	
	--if (action_id == hash("click_screen") or action_id == hash("tap_screen")) then
    if action_id == hash("click_screen") then
    	local res = utils.button_reaction(self, self.menu, action, main_menu_cb, nil, self.selected_node, {scale = gui.get_scale(self.menu).z}) or
    				utils.button_reaction(self, self.replay, action, replay_cb, nil, self.selected_node, {scale = gui.get_scale(self.replay).z})
		return res
	end
end

function on_reload(self)
    -- Add input-handling code here
    -- Remove this function if not needed
end
